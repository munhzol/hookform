{"version":3,"sources":["components/SignupForm.jsx","App.js","serviceWorker.js","index.js"],"names":["SignupForm","props","useState","firstname","setFirstname","lastname","setLastname","email","setEmail","password","setPassword","password_confirm","setPasswordConfirm","onSubmit","e","preventDefault","newUser","console","log","className","htmlFor","type","required","id","onChange","target","value","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2PAkEeA,EAhEI,SAACC,GAAU,MAGQC,mBAAS,IAHjB,mBAGnBC,EAHmB,KAGRC,EAHQ,OAIMF,mBAAS,IAJf,mBAInBG,EAJmB,KAITC,EAJS,OAKAJ,mBAAS,IALT,mBAKnBK,EALmB,KAKZC,EALY,OAMMN,mBAAS,IANf,mBAMnBO,EANmB,KAMTC,EANS,OAOqBR,mBAAS,IAP9B,mBAOnBS,EAPmB,KAODC,EAPC,KAe1B,OACI,oCACA,0BAAMC,SAPS,SAACC,GAChBA,EAAEC,iBACF,IAAMC,EAAU,CAAEb,YAAWE,WAAUE,QAAOE,WAAUE,oBACxDM,QAAQC,IAAI,UAAWF,IAIOG,UAAU,eACpC,6BACI,2BAAOC,QAAQ,aAAf,eACA,2BAAOC,KAAK,OAAOC,UAAQ,EAACC,GAAG,YAAYC,SAAW,SAACV,GAAD,OAAOV,EAAaU,EAAEW,OAAOC,QAASA,MAAQvB,KAExG,6BACI,2BAAOiB,QAAQ,YAAf,aACA,2BAAOC,KAAK,OAAOC,UAAQ,EAACC,GAAG,WAAWC,SAAW,SAACV,GAAD,OAAOR,EAAYQ,EAAEW,OAAOC,QAASA,MAAQrB,KAMtG,6BACI,2BAAOe,QAAQ,IAAf,WACA,2BAAOC,KAAK,QAAQG,SAAW,SAACV,GAAD,OAAON,EAASM,EAAEW,OAAOC,QAASA,MAAQnB,KAE7E,6BACI,2BAAOa,QAAQ,IAAf,cACA,2BAAOC,KAAK,WAAWG,SAAW,SAACV,GAAD,OAAOJ,EAAYI,EAAEW,OAAOC,QAASA,MAAQjB,KAEnF,6BACI,2BAAOW,QAAQ,IAAf,sBACA,2BAAOC,KAAK,WAAWG,SAAW,SAACV,GAAD,OAAOF,EAAmBE,EAAEW,OAAOC,QAASA,MAAQf,KAE1F,2BAAOU,KAAK,SAASK,MAAM,iBAE/B,6BACA,2CACgBvB,GAEhB,0CACeE,GAEf,uCACYE,GAEZ,0CACeE,GAEf,gDACqBE,KCjCdgB,MAjBf,WACE,OACI,oCAEE,kBAAC,EAAD,QCFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.ded22a30.chunk.js","sourcesContent":["import React, { useState }  from 'react';\n\nconst SignupForm = (props) => {\n    // const [username, setUsername] = useState(\"\");\n\n    const [firstname, setFirstname] = useState(\"\");\n    const [lastname, setLastname] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");  \n    const [password_confirm, setPasswordConfirm] = useState(\"\");  \n\n\n    const createUser = (e) => {\n        e.preventDefault();\n        const newUser = { firstname, lastname, email, password, password_confirm };\n        console.log(\"Welcome\", newUser);\n    };\n    return (\n        <>\n        <form onSubmit={ createUser } className=\"customClass\">\n            <div>\n                <label htmlFor=\"firstname\">Firstname: </label>\n                <input type=\"text\" required id=\"firstname\" onChange={ (e) => setFirstname(e.target.value) } value={ firstname } />\n            </div>\n            <div>\n                <label htmlFor=\"lastname\">Latname: </label>\n                <input type=\"text\" required id=\"lastname\" onChange={ (e) => setLastname(e.target.value) } value={ lastname } />\n            </div>\n            {/* <div>\n                <label htmlFor=\"username\">Username: </label>\n                <input type=\"text\" required id=\"username\" onChange={ (e) => setUsername(e.target.value) } value={ username } />\n            </div> */}\n            <div>\n                <label htmlFor=\"\">Email: </label>\n                <input type=\"email\" onChange={ (e) => setEmail(e.target.value) } value={ email }  />\n            </div>\n            <div>\n                <label htmlFor=\"\">Password: </label>\n                <input type=\"password\" onChange={ (e) => setPassword(e.target.value) } value={ password }  />\n            </div>\n            <div>\n                <label htmlFor=\"\">Confirm Password: </label>\n                <input type=\"password\" onChange={ (e) => setPasswordConfirm(e.target.value) } value={ password_confirm }  />\n            </div>\n            <input type=\"submit\" value=\"Create User\" />\n        </form>\n        <hr/>\n        <div>\n            Firstname: {firstname}\n        </div>\n        <div>\n            lastname: {lastname}\n        </div>\n        <div>\n            Email: {email}\n        </div>\n        <div>\n            Password: {password}\n        </div>\n        <div>\n            Cnfrm Password: {password_confirm}\n        </div>\n        </>\n    );\n}\n\nexport default SignupForm;\n","import React from 'react';\nimport './App.css';\n\n// import PersonCard from './components/PersonCard';\n// import UserForm from './components/UserForm';\n\nimport SignupForm from './components/SignupForm';\n\n\n\nfunction App() {\n  return (\n      <>\n\n        <SignupForm />\n\n\n        {/* <UserForm/>\n        <PersonCard className=\"person-card\" firstName=\"Doe\" lastName=\"Jane\" age={45} hairColor=\"Black\"/>\n        <PersonCard className=\"person-card\" firstName=\"Doe1\" lastName=\"Jane1\" age={41} hairColor=\"White\"/>\n        <PersonCard className=\"person-card\" firstName=\"Doe2\" lastName=\"Jane2\" age={42} hairColor=\"Yellow\"/>\n        <PersonCard className=\"person-card\" firstName=\"Doe3\" lastName=\"Jane3\" age={43} hairColor=\"Green\"/> */}\n\n      </>    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}